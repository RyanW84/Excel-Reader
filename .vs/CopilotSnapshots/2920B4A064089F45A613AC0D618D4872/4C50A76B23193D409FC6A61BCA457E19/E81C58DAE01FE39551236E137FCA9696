using System;
using System.Collections.Generic;
using ExcelReader.RyanW84.Controller;
using ExcelReader.RyanW84.Services;
using Spectre.Console;

namespace ExcelReader.RyanW84.UI;

public class PdfFormWriteUI
{
    private readonly PdfFormWriteController _controller;
    private readonly ReadFromPdfForm _readFromPdfForm;

    public PdfFormWriteUI(PdfFormWriteController controller, ReadFromPdfForm readFromPdfForm)
    {
        _controller = controller;
        _readFromPdfForm = readFromPdfForm;
    }

    public void GatherInput()
    {
        var filePath = AnsiConsole.Ask<string>("Enter the path to the PDF form file (or press Enter for default):", @"C:\\Users\\Ryanw\\OneDrive\\Documents\\GitHub\\Excel-Reader\\Data\\FillablePDF.pdf");

        var fields = _readFromPdfForm.ReadFormFields(filePath);
        if (fields.Count == 0)
        {
            AnsiConsole.MarkupLine("[red]No form fields found or file not found.[/]");
            return;
        }

        var fieldValues = new Dictionary<string, string>();
        AnsiConsole.MarkupLine("[yellow]Review and update PDF form fields:[/]");
        foreach (var field in fields)
        {
            var fieldName = field.Key;
            var currentValue = field.Value;
            var update = AnsiConsole.Confirm($"Field: [green]{fieldName}[/] | Current Value: [blue]{currentValue}[/] | Update?");
            if (update)
            {
                var newValue = AnsiConsole.Ask<string>($"Enter new value for [green]{fieldName}[/] (leave blank to keep current):");
                fieldValues[fieldName] = string.IsNullOrWhiteSpace(newValue) ? currentValue : newValue;
            }
            else
            {
                fieldValues[fieldName] = currentValue;
            }
        }

        _controller.WriteDataToPdfForm(filePath, fieldValues);
    }
}
