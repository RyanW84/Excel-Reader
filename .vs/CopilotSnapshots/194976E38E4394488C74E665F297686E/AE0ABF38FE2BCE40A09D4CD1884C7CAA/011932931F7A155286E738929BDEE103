using System.Data;
using ExcelReader.RyanW84.Helpers;
using Microsoft.Extensions.Configuration;
using OfficeOpenXml;

namespace ExcelReader.RyanW84.Services;

public class AnyExcelRead(IConfiguration configuration, UserNotifier userNotifier)
{
    private readonly IConfiguration _configuration = configuration;
    private readonly UserNotifier _userNotifier = userNotifier;

    public async Task<DataTable> ReadFromExcelAsync()
    {
        const string filePath = @"C:\Users\Ryanw\OneDrive\Documents\GitHub\Excel-Reader\Data\ExcelDynamic.xlsx";

        return await Task.Run(() =>
        {
            try
            {
                ExcelPackage.License.SetNonCommercialPersonal("Ryan Weavers");

                using var package = new ExcelPackage(new FileInfo(filePath));
                var worksheet = package.Workbook.Worksheets[0]; // Get first worksheet

                if (worksheet?.Dimension == null)
                {
                    _userNotifier.ShowWarning("Worksheet is empty or has no data.");
                    return new DataTable();
                }

                return ProcessWorksheetData(worksheet);
            }
            catch (FileNotFoundException)
            {
                _userNotifier.ShowError($"Excel file not found at: {filePath}");
                return new DataTable();
            }
            catch (Exception ex)
            {
                _userNotifier.ShowError($"Error reading Excel file: {ex.Message}");
                return new DataTable();
            }
        });
    }

    // Keep synchronous version for backward compatibility
    public DataTable ReadFromExcel()
    {
        return ReadFromExcelAsync().GetAwaiter().GetResult();
    }

    private DataTable ProcessWorksheetData(ExcelWorksheet worksheet)
    {
        var dataTable = new DataTable();

        // Add columns with type detection
        for (var columns = 1; columns <= worksheet.Dimension.Columns; columns++)
        {
            var columnHeader = worksheet.Cells[1, columns].Text;
            var readColumn = dataTable.Columns.Add(columnHeader);
            
            // Detect column data type
            DetectColumnType(worksheet, readColumn, columns);
            
            _userNotifier.ShowInfo($"Column added: {readColumn.ColumnName} (Type: {readColumn.DataType.Name})");
        }

        // Populate DataTable with Excel data
        for (var row = 2; row <= worksheet.Dimension.Rows; row++)
        {
            var dataRow = dataTable.NewRow();
            for (var col = 1; col <= worksheet.Dimension.Columns; col++)
            {
                var cellValue = worksheet.Cells[row, col].Text;
                var colType = dataTable.Columns[col - 1].DataType;
                
                try
                {
                    dataRow[col - 1] = ConvertCellValue(cellValue, colType);
                }
                catch (Exception)
                {
                    // If conversion fails, use empty value or default
                    dataRow[col - 1] = GetDefaultValue(colType);
                }
            }

            dataTable.Rows.Add(dataRow);
        }

        dataTable.TableName = worksheet.Name;
        return dataTable;
    }

    private static void DetectColumnType(ExcelWorksheet worksheet, DataColumn column, int columnIndex)
    {
        var typeDetected = false;

        foreach (var cell in worksheet.Cells[2, columnIndex, worksheet.Dimension.Rows, columnIndex])
        {
            if (string.IsNullOrEmpty(cell.Text)) continue;

            if (DateTime.TryParse(cell.Text, out _))
            {
                column.DataType = typeof(string); // Store as string in dd-MM-yyyy format
                typeDetected = true;
                break;
            }

            if (double.TryParse(cell.Text, out _))
            {
                column.DataType = typeof(double);
                typeDetected = true;
                break;
            }

            if (int.TryParse(cell.Text, out _))
            {
                column.DataType = typeof(int);
                typeDetected = true;
            }
            else if (float.TryParse(cell.Text, out _))
            {
                column.DataType = typeof(float);
                typeDetected = true;
            }
            else if (bool.TryParse(cell.Text, out _))
            {
                column.DataType = typeof(bool);
                typeDetected = true;
            }
        }

        // If no other type was detected, set it to string
        if (!typeDetected)
        {
            column.DataType = typeof(string);
        }
    }

    private static object ConvertCellValue(string cellValue, Type columnType)
    {
        if (string.IsNullOrEmpty(cellValue))
            return GetDefaultValue(columnType);

        if (columnType == typeof(string) && DateTime.TryParse(cellValue, out var dateValue))
        {
            return dateValue.ToString("dd-MM-yyyy"); // Store as date-only string
        }

        return Convert.ChangeType(cellValue, columnType);
    }

    private static object GetDefaultValue(Type type)
    {
        return type.IsValueType ? Activator.CreateInstance(type)! : string.Empty;
    }
}
