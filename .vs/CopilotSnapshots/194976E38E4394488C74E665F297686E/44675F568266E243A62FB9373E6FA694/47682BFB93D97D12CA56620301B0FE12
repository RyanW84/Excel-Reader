using Spectre.Console;

namespace ExcelReader.RyanW84.Helpers;

/// <summary>
/// Manages file path operations with comprehensive validation and exception handling
/// </summary>
public class FilePathManager
{
    /// <summary>
    /// Supported file types for the application
    /// </summary>
    public enum FileType
    {
        Excel,
        PDF,
        CSV,
        Generic
    }

    /// <summary>
    /// Default file paths for different file types
    /// </summary>
    private static readonly Dictionary<FileType, string> DefaultPaths = new()
    {
        { FileType.Excel, @"C:\Users\Ryanw\OneDrive\Documents\GitHub\Excel-Reader\Data\ExcelDynamic.xlsx" },
        { FileType.PDF, @"C:\Users\Ryanw\OneDrive\Documents\GitHub\Excel-Reader\Data\FillablePDF.pdf" },
        { FileType.CSV, @"C:\Users\Ryanw\OneDrive\Documents\GitHub\Excel-Reader\Data\Sample.csv" }
    };

    /// <summary>
    /// File extensions for different file types
    /// </summary>
    private static readonly Dictionary<FileType, string[]> ValidExtensions = new()
    {
        { FileType.Excel, new[] { ".xlsx", ".xls" } },
        { FileType.PDF, new[] { ".pdf" } },
        { FileType.CSV, new[] { ".csv" } },
        { FileType.Generic, Array.Empty<string>() }
    };

    /// <summary>
    /// Gets a file path with user interaction and validation
    /// </summary>
    /// <param name="fileType">The type of file to select</param>
    /// <param name="customDefault">Custom default path (optional)</param>
    /// <param name="validateExistence">Whether to validate file existence</param>
    /// <returns>Validated file path</returns>
    /// <exception cref="FilePathValidationException">Thrown when file path validation fails</exception>
    public string GetFilePath(FileType fileType, string? customDefault = null, bool validateExistence = true)
    {
        try
        {
            var defaultPath = customDefault ?? GetDefaultPath(fileType);
            var fileTypeName = GetFileTypeName(fileType);

            var filePath = PromptForFilePath(defaultPath, fileTypeName);

            if (validateExistence)
            {
                ValidateFilePath(filePath, fileType);
            }

            return filePath;
        }
        catch (FilePathValidationException)
        {
            throw;
        }
        catch (Exception ex)
        {
            throw new FilePathValidationException($"Unexpected error while getting file path: {ex.Message}", ex);
        }
    }

    /// <summary>
    /// Validates a file path with comprehensive checks
    /// </summary>
    /// <param name="filePath">The file path to validate</param>
    /// <param name="fileType">The expected file type</param>
    /// <exception cref="FilePathValidationException">Thrown when validation fails</exception>
    public void ValidateFilePath(string filePath, FileType fileType)
    {
        try
        {
            // Check if path is null or empty
            if (string.IsNullOrWhiteSpace(filePath))
            {
                throw new FilePathValidationException("File path cannot be empty or null.");
            }

            // Check if file exists
            if (!File.Exists(filePath))
            {
                throw new FilePathValidationException($"File not found: {filePath}", 
                    new FileNotFoundException($"The file '{filePath}' was not found."));
            }

            // Check file extension if specific type is required
            if (fileType != FileType.Generic && ValidExtensions.ContainsKey(fileType))
            {
                var extension = Path.GetExtension(filePath).ToLowerInvariant();
                var validExtensions = ValidExtensions[fileType];
                
                if (validExtensions.Length > 0 && !validExtensions.Contains(extension))
                {
                    throw new FilePathValidationException(
                        $"Invalid file extension. Expected: {string.Join(", ", validExtensions)}, Got: {extension}");
                }
            }

            // Check file accessibility
            ValidateFileAccessibility(filePath);
        }
        catch (FilePathValidationException)
        {
            throw;
        }
        catch (UnauthorizedAccessException ex)
        {
            throw new FilePathValidationException($"Access denied to file: {filePath}. Please check file permissions.", ex);
        }
        catch (IOException ex)
        {
            throw new FilePathValidationException($"I/O error accessing file: {filePath}. The file may be in use by another application.", ex);
        }
        catch (Exception ex)
        {
            throw new FilePathValidationException($"Unexpected error validating file path: {ex.Message}", ex);
        }
    }

    /// <summary>
    /// Prompts user for file path with UI interaction
    /// </summary>
    /// <param name="defaultPath">Default file path</param>
    /// <param name="fileTypeName">Display name for file type</param>
    /// <returns>Selected file path</returns>
    private string PromptForFilePath(string defaultPath, string fileTypeName)
    {
        var useExisting = AnsiConsole.Confirm(
            $"Use existing {fileTypeName} file path? [green]{defaultPath}[/]"
        );

        return useExisting
            ? defaultPath
            : AnsiConsole.Ask<string>($"Enter the path to the {fileTypeName} file:", defaultPath);
    }

    /// <summary>
    /// Gets the default path for a file type
    /// </summary>
    /// <param name="fileType">The file type</param>
    /// <returns>Default path</returns>
    private string GetDefaultPath(FileType fileType)
    {
        return DefaultPaths.TryGetValue(fileType, out var path) 
            ? path 
            : string.Empty;
    }

    /// <summary>
    /// Gets a user-friendly name for the file type
    /// </summary>
    /// <param name="fileType">The file type</param>
    /// <returns>Display name</returns>
    private string GetFileTypeName(FileType fileType)
    {
        return fileType switch
        {
            FileType.Excel => "Excel",
            FileType.PDF => "PDF",
            FileType.CSV => "CSV",
            FileType.Generic => "file",
            _ => "file"
        };
    }

    /// <summary>
    /// Validates that the file is accessible for reading
    /// </summary>
    /// <param name="filePath">The file path to check</param>
    private static void ValidateFileAccessibility(string filePath)
    {
        try
        {
            using var fileStream = File.OpenRead(filePath);
            // File is accessible for reading
        }
        catch (UnauthorizedAccessException)
        {
            throw;
        }
        catch (IOException)
        {
            throw;
        }
        catch (Exception ex)
        {
            throw new FilePathValidationException($"Unable to access file: {ex.Message}", ex);
        }
    }

    /// <summary>
    /// Creates a directory if it doesn't exist
    /// </summary>
    /// <param name="filePath">File path to extract directory from</param>
    /// <exception cref="FilePathValidationException">Thrown when directory cannot be created</exception>
    public void EnsureDirectoryExists(string filePath)
    {
        try
        {
            var directory = Path.GetDirectoryName(filePath);
            if (!string.IsNullOrWhiteSpace(directory) && !Directory.Exists(directory))
            {
                Directory.CreateDirectory(directory);
            }
        }
        catch (Exception ex)
        {
            throw new FilePathValidationException($"Failed to create directory for file: {filePath}. Error: {ex.Message}", ex);
        }
    }

    /// <summary>
    /// Safely gets the full path of a file
    /// </summary>
    /// <param name="filePath">The file path</param>
    /// <returns>Full path</returns>
    /// <exception cref="FilePathValidationException">Thrown when path is invalid</exception>
    public string GetFullPath(string filePath)
    {
        try
        {
            return Path.GetFullPath(filePath);
        }
        catch (Exception ex)
        {
            throw new FilePathValidationException($"Invalid file path format: {filePath}. Error: {ex.Message}", ex);
        }
    }
}

/// <summary>
/// Custom exception for file path validation errors
/// </summary>
public class FilePathValidationException : Exception
{
    public FilePathValidationException(string message) : base(message) { }
    public FilePathValidationException(string message, Exception innerException) : base(message, innerException) { }
}