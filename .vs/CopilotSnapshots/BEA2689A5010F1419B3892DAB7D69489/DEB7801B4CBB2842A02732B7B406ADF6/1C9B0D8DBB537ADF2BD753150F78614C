using System.Data;
using ExcelReader.RyanW84.Abstractions;
using ExcelReader.RyanW84.Helpers;

namespace ExcelReader.RyanW84.Services;

/// <summary>
/// ExcelBeginner specific service following Single Responsibility Principle
/// </summary>
public class ExcelBeginnerService : IExcelBeginnerService
{
    private readonly IExcelReader _excelReader;
    private readonly IFilePathService _filePathService;
    private readonly INotificationService _notificationService;

    public ExcelBeginnerService(
        IExcelReader excelReader,
        IFilePathService filePathService,
        INotificationService notificationService)
    {
        _excelReader = excelReader ?? throw new ArgumentNullException(nameof(excelReader));
        _filePathService = filePathService ?? throw new ArgumentNullException(nameof(filePathService));
        _notificationService = notificationService ?? throw new ArgumentNullException(nameof(notificationService));
    }

    public async Task<DataTable> ReadFromExcelAsync()
    {
        try
        {
            // Use a custom default path for ExcelBeginner specific file
            var customDefault =
                @"C:\Users\Ryanw\OneDrive\Documents\GitHub\Excel-Reader\Data\ExcelBeginner.xlsx";
            var filePath = _filePathService.GetFilePath(FileType.Excel, customDefault);

            var dataTable = await _excelReader.ReadAsync(filePath);

            if (dataTable.Rows.Count == 0)
            {
                _notificationService.ShowWarning("No data found in the Excel file.");
            }
            else
            {
                _notificationService.ShowSuccess(
                    $"Successfully read {dataTable.Rows.Count} rows from Excel file."
                );
            }

            return dataTable;
        }
        catch (FilePathValidationException ex)
        {
            _notificationService.ShowError($"Excel file path error: {ex.Message}");
            return new DataTable();
        }
        catch (Exception ex)
        {
            _notificationService.ShowError($"Error reading Excel file: {ex.Message}");
            return new DataTable();
        }
    }

    // Keep synchronous version for backward compatibility
    public DataTable ReadFromExcel()
    {
        return ReadFromExcelAsync().GetAwaiter().GetResult();
    }
}
