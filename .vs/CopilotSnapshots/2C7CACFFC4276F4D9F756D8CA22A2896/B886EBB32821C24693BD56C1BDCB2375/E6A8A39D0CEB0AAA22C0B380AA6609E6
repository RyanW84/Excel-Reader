using System.Data;
using ExcelReader.RyanW84.Models;

namespace ExcelReader.RyanW84.Abstractions;

/// <summary>
/// Generic repository interface following Repository pattern and Dependency Inversion Principle
/// </summary>
/// <typeparam name="T">Entity type</typeparam>
public interface IRepository<T> where T : class
{
    Task<IEnumerable<T>> GetAllAsync();
    Task<T?> GetByIdAsync(int id);
    Task<T> AddAsync(T entity);
    Task<IEnumerable<T>> AddRangeAsync(IEnumerable<T> entities);
    Task<T> UpdateAsync(T entity);
    Task DeleteAsync(int id);
    Task<bool> ExistsAsync(int id);
    Task<int> SaveChangesAsync();
}

/// <summary>
/// Specific repository interface for ExcelBeginner entities
/// </summary>
public interface IExcelBeginnerRepository : IRepository<ExcelBeginner>
{
    Task<IEnumerable<ExcelBeginner>> GetByNameAsync(string name);
    Task<IEnumerable<ExcelBeginner>> GetByAgeRangeAsync(int minAge, int maxAge);
}

/// <summary>
/// Interface for database table operations
/// </summary>
public interface ITableManager
{
    Task EnsureTableExistsAsync(DataTable dataTable);
    Task<bool> TableExistsAsync(string tableName);
    Task CreateTableAsync(string tableName, DataTable structure);
    Task DropTableAsync(string tableName);
}

/// <summary>
/// Interface for data conversion operations
/// </summary>
public interface IDataConverter<TSource, TTarget>
{
    TTarget Convert(TSource source);
    Task<TTarget> ConvertAsync(TSource source);
}

/// <summary>
/// Interface for notification services
/// </summary>
public interface INotificationService
{
    void ShowSuccess(string message);
    void ShowError(string message);
    void ShowWarning(string message);
    void ShowInfo(string message);
}

/// <summary>
/// Interface for file path management
/// </summary>
public interface IFilePathService
{
    string GetFilePath(FileType fileType, string? customDefault = null);
    void ValidateFilePath(string filePath, FileType fileType);
    bool IsValidPath(string filePath);
}

/// <summary>
/// Enum for file types
/// </summary>
public enum FileType
{
    Excel,
    PDF,
    CSV,
    Generic
}