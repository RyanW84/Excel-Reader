using System.Data;

namespace ExcelReader.RyanW84.Abstractions;

/// <summary>
/// Interface for file reading operations - follows Interface Segregation Principle
/// </summary>
/// <typeparam name="T">The type of data to read</typeparam>
public interface IFileReader<T>
{
    /// <summary>
    /// Reads data from a file asynchronously
    /// </summary>
    /// <param name="filePath">Path to the file to read</param>
    /// <returns>Data read from the file</returns>
    Task<T> ReadAsync(string filePath);
    
    /// <summary>
    /// Validates if the file can be read
    /// </summary>
    /// <param name="filePath">Path to the file to validate</param>
    /// <returns>True if file can be read, false otherwise</returns>
    bool CanRead(string filePath);
}

/// <summary>
/// Interface for Excel file reading operations
/// </summary>
public interface IExcelReader : IFileReader<DataTable>
{
    /// <summary>
    /// Gets available worksheet names in the Excel file
    /// </summary>
    /// <param name="filePath">Path to the Excel file</param>
    /// <returns>List of worksheet names</returns>
    Task<IEnumerable<string>> GetWorksheetsAsync(string filePath);
}

/// <summary>
/// Interface for PDF file reading operations
/// </summary>
public interface IPdfReader : IFileReader<Dictionary<string, string>>
{
    /// <summary>
    /// Reads form fields from PDF
    /// </summary>
    /// <param name="filePath">Path to the PDF file</param>
    /// <returns>Dictionary of form field names and values</returns>
    Task<Dictionary<string, string>> ReadFormFieldsAsync(string filePath);
}

/// <summary>
/// Interface for CSV file reading operations
/// </summary>
public interface ICsvReader : IFileReader<DataTable>
{
    /// <summary>
    /// Gets the number of columns in the CSV file
    /// </summary>
    /// <param name="filePath">Path to the CSV file</param>
    /// <returns>Number of columns</returns>
    Task<int> GetColumnCountAsync(string filePath);
}