using System.Data;
using ExcelReader.RyanW84.Data;
using ExcelReader.RyanW84.Services;
using Microsoft.Extensions.Configuration;
using Spectre.Console;
using System.Collections.Generic;

namespace ExcelReader.RyanW84.Controller;

public class ExcelWriteController
{
    private readonly WriteToExcelService _writeToExcelService;
    private readonly AnyExcelRead _anyExcelRead;
    private readonly IConfiguration _configuration;
    private readonly ExcelReaderDbContext _dbContext;
    private readonly DictionaryToDataTableConverter _dictToTableConverter;
    private readonly CreateTableFromAnyExcel _createTableFromAnyExcel;

    public ExcelWriteController(   //this needs to be simplified
        IConfiguration configuration,
        ExcelReaderDbContext dbContext,
        WriteToExcelService writeToExcelService,
        AnyExcelRead anyExcelRead,
        DictionaryToDataTableConverter dictToTableConverter,
        CreateTableFromAnyExcel createTableFromAnyExcel)
    {
        _writeToExcelService = writeToExcelService;
        _anyExcelRead = anyExcelRead;
        _configuration = configuration;
        _dbContext = dbContext;
        _dictToTableConverter = dictToTableConverter;
        _createTableFromAnyExcel = createTableFromAnyExcel;
    } 

    // 1. Get the file path from the user
    public string GetFilePath(string defaultPath)
    {
        return AnsiConsole.Ask<string>(
            "Enter the path to the Excel file (or press Enter for default):",
            defaultPath
        );
    }

    // 2. Get the existing field values from the Excel file
    public Dictionary<string, string>? GetExistingFieldValues(string filePath)
    {
        var table = _anyExcelRead.ReadFromExcel();
        if (table == null || table.Rows.Count == 0)
            return null;
        var existingFields = new Dictionary<string, string>();
        foreach (DataColumn col in table.Columns)
        {
            existingFields[col.ColumnName] = table.Rows[0][col.ColumnName]?.ToString() ?? string.Empty;
        }
        return existingFields;
    }

    // 3. Update the field values (interactive)
    public Dictionary<string, string> UpdateFieldValues(Dictionary<string, string> existingFields)
    {
        var updatedFields = new Dictionary<string, string>();
        foreach (var field in existingFields)
        {
            var fieldName = field.Key;
            var currentValue = field.Value;
            string newValue = currentValue;
            bool update = AnsiConsole.Confirm($"Field: [green]{fieldName}[/] | Current Value: [yellow]{currentValue}[/] | Update?");
            if (update)
            {
                newValue = AnsiConsole.Ask<string>($"Enter new value for {fieldName} (current: {currentValue}):", currentValue);
            }
            updatedFields[fieldName] = newValue;
        }
        return updatedFields;
    }

    // 4. Write the updated fields to the Excel file
    public void WriteDataToExcel(string filePath, Dictionary<string, string> fieldValues)
    {
        _writeToExcelService.WriteFieldsToExcel(filePath, fieldValues);
    }

    // 5. Write the updated fields to the database
    public void WriteDataToDatabase(Dictionary<string, string> fieldValues)
    {
        // Convert to DataTable and use CreateTableFromAnyExcel
        var objDict = new Dictionary<string, object>(fieldValues.Count);
        foreach (var kvp in fieldValues)
            objDict[kvp.Key] = kvp.Value;
        var dataTable = _dictToTableConverter.Convert(objDict);
        dataTable.TableName = "ExcelData";
        _createTableFromAnyExcel.CreateTableFromExcel(dataTable);
        _dbContext.SaveChanges();
    }

    // Orchestrator method for all steps
    public void UpdateExcelAndDatabase(string defaultPath)
    {
        // 1. Get file path
        var filePath = GetFilePath(defaultPath);
        // 2. Get existing field values
        var existingFields = GetExistingFieldValues(filePath);
        if (existingFields == null || existingFields.Count == 0)
        {
            AnsiConsole.MarkupLine("[red]No data found in the Excel file.[/]", "Error");
            return;
        }
        // 3. Update field values
        var updatedFields = UpdateFieldValues(existingFields);
        // 4. Write to Excel
        WriteDataToExcel(filePath, updatedFields);
        // 5. Write to database
        WriteDataToDatabase(updatedFields);
        AnsiConsole.MarkupLine("[green]Excel file and database updated successfully![/]", "Success");
    }
}
