using System.Data;
using ExcelReader.RyanW84.Data;
using ExcelReader.RyanW84.Services;
using Microsoft.Extensions.Configuration;
using System.Collections.Generic;

namespace ExcelReader.RyanW84.Controller;

public class ExcelWriteController
{
    private readonly WriteToExcelService _writeToExcelService;
    private readonly AnyExcelRead _anyExcelRead;
    private readonly DictionaryToDataTableConverter _dictToTableConverter;
    private readonly CreateTableFromAnyExcel _createTableFromAnyExcel;
    private readonly ExcelReaderDbContext _dbContext;

    public ExcelWriteController(
        WriteToExcelService writeToExcelService,
        AnyExcelRead anyExcelRead,
        DictionaryToDataTableConverter dictToTableConverter,
        CreateTableFromAnyExcel createTableFromAnyExcel,
        ExcelReaderDbContext dbContext)
    {
        _writeToExcelService = writeToExcelService;
        _anyExcelRead = anyExcelRead;
        _dictToTableConverter = dictToTableConverter;
        _createTableFromAnyExcel = createTableFromAnyExcel;
        _dbContext = dbContext;
    }

    // Get the existing field values from the Excel file
    public Dictionary<string, string>? GetExistingFieldValues(string filePath)
    {
        var table = _anyExcelRead.ReadFromExcel();
        if (table == null || table.Rows.Count == 0)
            return null;
        
        var existingFields = new Dictionary<string, string>();
        foreach (DataColumn col in table.Columns)
        {
            existingFields[col.ColumnName] = table.Rows[0][col.ColumnName]?.ToString() ?? string.Empty;
        }
        return existingFields;
    }

    // Write the updated fields to the Excel file
    public void WriteDataToExcel(string filePath, Dictionary<string, string> fieldValues)
    {
        _writeToExcelService.WriteFieldsToExcel(filePath, fieldValues);
    }

    // Write the updated fields to the database
    public void WriteDataToDatabase(Dictionary<string, string> fieldValues)
    {
        // Convert to DataTable and use CreateTableFromAnyExcel
        var objDict = new Dictionary<string, object>(fieldValues.Count);
        foreach (var kvp in fieldValues)
            objDict[kvp.Key] = kvp.Value;
        
        var dataTable = _dictToTableConverter.Convert(objDict);
        dataTable.TableName = "ExcelData";
        _createTableFromAnyExcel.CreateTableFromExcel(dataTable);
        _dbContext.SaveChanges();
    }

    // Process both Excel and database updates
    public void ProcessExcelAndDatabaseUpdates(string filePath, Dictionary<string, string> fieldValues)
    {
        WriteDataToExcel(filePath, fieldValues);
        WriteDataToDatabase(fieldValues);
    }
}
