using ExcelReader.RyanW84.Abstractions;
using ExcelReader.RyanW84.Controller;
using ExcelReader.RyanW84.Data;
using ExcelReader.RyanW84.Helpers;
using ExcelReader.RyanW84.Services;
using ExcelReader.RyanW84.UserInterface;

using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;

namespace ExcelReader.RyanW84
{
    public class Program
    {
        public static async Task Main(string[] args)
        {
            var host = CreateHostBuilder(args).Build();
            using var scope = host.Services.CreateScope();
            var services = scope.ServiceProvider;
            // Ensure database is created
            var context = services.GetRequiredService<ExcelReaderDbContext>();
            context.Database.EnsureDeleted();
            context.Database.EnsureCreated();
            // Show main menu
            var mainMenu = new MainMenuUI(
                services.GetRequiredService<ExcelWriteController>(),
                services.GetRequiredService<AnyExcelRead>(),
                services.GetRequiredService<PdfFormWriteController>(),
                services.GetRequiredService<ReadFromPdfForm>(),
                services.GetRequiredService<CsvController>(),
                services.GetRequiredService<AnyExcelReadController>(),
                services.GetRequiredService<ExcelBeginnerController>(),
                services.GetRequiredService<PdfTableController>(),
                services.GetRequiredService<PdfFormController>()
            );
            await mainMenu.ShowMenuAsync();
        }

        private static IHostBuilder CreateHostBuilder(string[] args) =>
            Host.CreateDefaultBuilder(args)
                .ConfigureServices(
                    (hostContext, services) =>
                    {
                        var connectionString = hostContext.Configuration.GetConnectionString(
                            "DefaultConnection"
                        );

                        services.AddDbContext<ExcelReaderDbContext>(options =>
                            options.UseSqlServer(connectionString)
                        );
                        services.AddScoped<ExcelBeginnerController>();
                        services.AddScoped<AnyExcelReadController>();
                        services.AddScoped<ExcelWriteController>();
                        services.AddScoped<CsvController>();
                        services.AddScoped<PdfTableController>();
                        services.AddScoped<PdfFormController>();
                        services.AddScoped<ReadFromCsv>();
                        services.AddScoped<CreateTableFromCSV>();
                        services.AddScoped<CreateTableFromAnyExcel>();
                        services.AddScoped<CreateTableFromPdfForm>();
                        services.AddScoped<ReadFromPdf>();
                        services.AddScoped<ReadFromPdfForm>();
                        services.AddScoped<WriteToPdfForm>();
                        services.AddScoped<PdfFormWriteController>();
                        services.AddScoped<WriteToExcelService>();
                        services.AddScoped<AnyExcelRead>();
                        services.AddScoped<WritePdfFormDataToDatabaseService>();
                        services.AddScoped<DictionaryToDataTableConverter>();
                        services.AddScoped<WriteUpdatedExcelDataToDatabase>();
                        services.AddScoped<INotificationService, UserNotifier>();
                        services.AddScoped<ITableManager, TableExistence>();
                        services.AddScoped<IExcelBeginnerRepository, ExcelBeginnerRepository>();
                        services.AddScoped<IDataConverter<Dictionary<string, string>, DataTable>, DictionaryToDataTableConverter>();
                        services.AddScoped<IFieldInputUi, FieldInputUi>();
                        services.AddScoped<IExcelReader, ExcelReaderService>();
                        services.AddScoped<IFilePathService, FilePathManager>();
                        services.AddScoped<IFilePathValidation, FilePathValidationService>();
                    }
                );
    }
}
