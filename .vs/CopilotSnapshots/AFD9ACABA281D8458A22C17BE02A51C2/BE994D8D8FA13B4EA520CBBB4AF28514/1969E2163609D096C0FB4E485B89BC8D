using System.Globalization;

using ExcelReader.RyanW84.Helpers;

using Spectre.Console;

namespace ExcelReader.RyanW84.UserInterface;

public class PdfFormWriteUi
{
	public string GetFilePath(string defaultPath)
	{
		return AnsiConsole.Ask<string>(
			"\nEnter the path to the PDF form file (or press Enter for default):" ,
			defaultPath
		);
	}
	public Dictionary<string, string> GatherUpdatedFields(Dictionary<string, string> fields)
    {
        var fieldValues = new Dictionary<string, string>();
        string? dobValue = fields.TryGetValue("DOB", out string? value) ? value : null;
        string? ageFieldName = null;

        AnsiConsole.MarkupLine("[yellow]Review and update PDF form fields:[/]");
        foreach (var field in fields)
        {
            var fieldName = field.Key;
            var currentValue = field.Value;
            string newValue = currentValue;
            bool update = AnsiConsole.Confirm(
                $"Field: [green]{fieldName}[/] | Current Value: [yellow]{currentValue}[/] | Update?"
            );
            if (update)
            {
                if (fieldName.Equals("Name", StringComparison.OrdinalIgnoreCase))
                {
                    newValue = PromptForName(currentValue);
                }
                else if (fieldName.Equals("Surname", StringComparison.OrdinalIgnoreCase))
                {
                    newValue = PromptForSurname(currentValue);
                }
                else if (
                    fieldName.Equals("DOB", StringComparison.OrdinalIgnoreCase)
                    || fieldName.Contains("dob", StringComparison.CurrentCultureIgnoreCase)
                )
                {
                    newValue = PromptForDob(currentValue);
                    dobValue = newValue;
                }
                else if (fieldName.Equals("age", StringComparison.OrdinalIgnoreCase))
                {
                    AnsiConsole.MarkupLine("Age is autocalculated");
                    ageFieldName = fieldName;
                    continue;
                }
                else if (fieldName.Equals("sex", StringComparison.OrdinalIgnoreCase))
                {
                    newValue = PromptForSex();
                }
                else if (fieldName.Equals("colour", StringComparison.OrdinalIgnoreCase))
                {
                    newValue = PromptForColour();
                }
                else if (fieldName.Equals("wanted", StringComparison.OrdinalIgnoreCase))
                {
                    newValue = PromptForWanted();
                }
            }
            fieldValues[fieldName] = newValue;
        }

        // After all fields, recalculate age from DOB if possible, case-insensitive
        ageFieldName ??= fields.Keys.FirstOrDefault(k =>
            k.Equals("age", StringComparison.OrdinalIgnoreCase)
        );
        if (ageFieldName != null)
        {
            var age = FieldValidator.CalculateAge(dobValue);
            if (age != null)
            {
                fieldValues[ageFieldName] = age.ToString();
                AnsiConsole.MarkupLine($"[green]Calculated age from DOB: {age}[/]");
            }
        }
        return fieldValues;
    }

    private string PromptForName(string currentValue) =>
        AnsiConsole.Prompt(
            new TextPrompt<string>("Enter the updated Name:")
                .DefaultValue(currentValue)
                .AllowEmpty()
        );

    private string PromptForSurname(string currentValue) =>
        AnsiConsole.Prompt(
            new TextPrompt<string>("Enter the updated Surname:")
                .DefaultValue(currentValue)
                .AllowEmpty()
        );

    private string PromptForDob(string currentValue) =>
        AnsiConsole.Prompt(
            new TextPrompt<string>("Enter Date of Birth (dd-MM-yyyy):")
                .DefaultValue(currentValue)
                .Validate(date =>
                    FieldValidator.IsValidDate(date)
                        ? ValidationResult.Success()
                        : ValidationResult.Error("Invalid date format. Use dd-MM-yyyy.")
                )
        );
    

    private string PromptForSex() =>
        AnsiConsole.Prompt(
            new SelectionPrompt<string>()
                .Title("Select sex:")
                .AddChoices("Male", "Female", "Other")
        );

    private string PromptForColour() =>
        AnsiConsole.Prompt(
            new SelectionPrompt<string>()
                .Title("Select colour:")
                .AddChoices("White", "Black", "Asian", "African", "Other")
        );

    private string PromptForWanted() =>
        AnsiConsole.Prompt(
            new SelectionPrompt<string>()
                .Title("Is wanted?")
                .AddChoices("Yes", "No")
        );
}
