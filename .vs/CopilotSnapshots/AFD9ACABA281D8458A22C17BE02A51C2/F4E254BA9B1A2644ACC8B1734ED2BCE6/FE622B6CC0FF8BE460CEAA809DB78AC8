using System.Data;
using System.IO;
using OfficeOpenXml;
using ExcelReader.RyanW84.Helpers;

namespace ExcelReader.RyanW84.Services;

public class ReadFromCsv
{
    private readonly FilePathManager _filePathManager;
    private readonly UserNotifier _userNotifier;

    public ReadFromCsv(FilePathManager filePathManager, UserNotifier userNotifier)
    {
        _filePathManager = filePathManager;
        _userNotifier = userNotifier;
    }

    public async Task<List<string[]>> ReadCsvFile()
    {
        string filePath;
        try
        {
            filePath = _filePathManager.GetFilePath(FilePathManager.FileType.CSV);
        }
        catch (FilePathValidationException ex)
        {
            _userNotifier.ShowError($"CSV file path error: {ex.Message}");
            return new List<string[]>();
        }
        _userNotifier.ShowInfo($"Opening {filePath}");

        ExcelPackage.License.SetNonCommercialPersonal("Ryan Weavers");

        var csvData = new List<string[]>();

        using var stream = new FileStream(filePath, FileMode.Open, FileAccess.Read);
        using var reader = new StreamReader(stream);

        string? line;
        while ((line = await reader.ReadLineAsync()) != null)
        {
            var rowData = line.Split(','); // Adjust for your delimiter and quoted values if needed
            csvData.Add(rowData);
        }

        return csvData;
    }

    public async Task<DataTable> ConvertToDataTableAsync(List<string[]> csvData)
    {
        return await Task.Run(() =>
        {
            var dataTable = new DataTable();

            if (csvData == null || csvData.Count == 0)
                return dataTable;

            // Add columns using the first row as header
            foreach (var columnName in csvData[0])
            {
                dataTable.Columns.Add(columnName ?? string.Empty);
            }

            // Add rows (skip header row)
            for (int i = 1; i < csvData.Count; i++)
            {
                dataTable.Rows.Add(csvData[i]);
            }

            return dataTable;
        });
    }

    // Keep synchronous version for backward compatibility
    public DataTable ConvertToDataTable(List<string[]> csvData)
    {
        return ConvertToDataTableAsync(csvData).GetAwaiter().GetResult();
    }
}
